/**
* File name: file.controller.js
* Author: HongMing
* Function: used to provide all APIs involved in the back-end
*/

// Initialize API classes
const fileHandle = require("../middleware/file.handle");
const apkAnalyse = require("../middleware/apk.analyse");
const task = require("../middleware/task");
const device = require("../middleware/device");
const account = require("../middleware/account");
const settings = require("../middleware/settings");
const database = require("../middleware/database");

/**
Remove an Android app file from the back-end directory
*/
const remove = async (req, res) => {
  const files = req.query.files;
  if (files == undefined) {
    return res.status(400).send({
      message: `Fail to remove files: the parameter files is empty`,
    });
  }
  await fileHandle.removeFile(files, function (err) {
    if (err == "") {
      return res.status(200).send({
        message: "Remove the file successfully: " + files,
      });
    }
    res.status(500).send({
      message: `Could not remove the file: ${err}`,
    });
  });
};

/**
Upload tested Android app to the back-end
*/
const upload = async (req, res) => {
  try {
    await fileHandle.uploadFileMiddleware(req, res);
    if (req.file == undefined) {
      return res.status(400).send({ message: "Please upload a file!" });
    }
    res.status(200).send({
      message: `Uploaded the file ${req.file.originalname} successfully`,
    });
  } catch (err) {
    console.log(err);
    if (err.code == "LIMIT_FILE_SIZE") {
      return res.status(500).send({
        message: "File size cannot be larger than 2MB!",
      });
    }
    return res.status(500).send({
      message: `Could not upload the file: ${req.file.originalname}. ${err}`,
    });
  }
};

/**
Get the information of a tested Android app
*/
const getAPKInfo = async (req, res) => {
  const fileName = req.query.file;
  if (fileName == undefined) {
    return res.status(400).send({ message: "The file name is empty!" });
  }
  try {
    let result = await apkAnalyse.extractAPK(fileName);
    console.log(result);
    res.status(200).send({
      message: `Get the information of the file ${fileName} successfully`,
      appInfo: { label: result.application.label[0], package: result.package, icon: result.icon },
    });
  } catch (err) {
    res.status(500).send({
      message: `Could not get the information of the file: ${fileName}. ${err}`,
    });
  }
};

// Start a new testing task
const addNewTask = task.addNewTask;
// Add a test result generated by test scripts
const insertTaskResult = task.insertTaskResult;
// Get the result of a test task
const findRecentTaskResultByTaskId = task.findRecentTaskResultByTaskId;
// Get the information of all test tasks
const findAllTasks = task.findAllTasks;
// Update a task's status
const updateTask = task.updateTask;
// Get the result of a user's latest test task
const findRecentTaskResult = task.findRecentTaskResult;
// Delete test tasks
const deleteTasks = task.deleteTasks;
// Get the ranking list of Android apps' performance
const getPerformanceRankings = task.getPerformanceRankings;
// Get the ranking list of Android apps' stability
const getStabilityRankings = task.getStabilityRankings;
// Zip and return test results to the front end
const zipResult = task.zipResult;
// Get the information of a user account
const getAccount = account.findOneAccount;
// Save the information of a user account
const saveAccount = account.saveAccount;
// Save the information of a user profile's photo
const updatePhoto = account.updatePhoto;
// Get information of all Android devices
const findAllDevices = device.findAllDevices;
// Get an idle Android device
const findIdleDevice = device.findIdleDevice;
// Update the status of an Android device
const updateDeviceStatus = device.updateDeviceStatus;
// Get the usage count of all Android devices
const getDeviceStat = device.getDeviceStat;
// Get the setting information
const getSettings = settings.getSettings;
// Update the setting information
const saveSettings = settings.saveSettings;

module.exports = {
  updatePhoto,
  upload,
  remove,
  addNewTask,
  deleteTasks,
  getAPKInfo,
  getSettings,
  findAllTasks,
  findRecentTaskResult,
  updateTask,
  getAccount,
  saveAccount,
  saveSettings,
  findAllDevices,
  getPerformanceRankings,
  getStabilityRankings,
  insertTaskResult,
  findRecentTaskResultByTaskId,
  findIdleDevice,
  updateDeviceStatus,
  getDeviceStat,
  zipResult
};
